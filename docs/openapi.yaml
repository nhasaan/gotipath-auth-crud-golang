openapi: 3.0.3
info:
  title: Go Auth CRUD API
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /api/v1/auth/register:
    post:
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        '201': { description: Created }
  /api/v1/auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
  /api/v1/categories:
    get:
      summary: List categories (paginated)
      parameters:
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
        - in: query
          name: sort_by
          schema: { type: string, enum: [id, created_at] }
        - in: query
          name: order
          schema: { type: string, enum: [asc, desc] }
      responses:
        '200': { description: OK }
  /api/v1/categories/{id}:
    get:
      summary: Get category by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
  /api/admin/v1/categories:
    post:
      summary: Create category (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
              required: [name]
      responses:
        '201': { description: Created }
  /api/v1/videos:
    get:
      summary: List videos (paginated)
      parameters:
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: cursor
          schema: { type: string }
        - in: query
          name: sort_by
          schema: { type: string, enum: [id, created_at] }
        - in: query
          name: order
          schema: { type: string, enum: [asc, desc] }
      responses:
        '200': { description: OK }
  /api/v1/videos/{id}:
    get:
      summary: Get video by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: OK }
  /api/admin/v1/videos:
    post:
      summary: Create video (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                duration: { type: string }
                url: { type: string }
                thumbnailPath: { type: string }
                categoryId: { type: integer }
              required: [title, duration, url, thumbnailPath, categoryId]
      responses:
        '201': { description: Created }
  /api/admin/v1/videos/{id}:
    put:
      summary: Update video (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: OK }
  /api/admin/v1/uploads:
    post:
      summary: Upload file (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201': { description: Created }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
